package functional

// DO NOT EDIT.
// Code generated by cmd/generate.go
// source: map.tmpl

// MapUint ...
func MapUint(slice []uint, fn func(uint) uint) (ret []uint) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapUint8 ...
func MapUint8(slice []uint8, fn func(uint8) uint8) (ret []uint8) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapUint16 ...
func MapUint16(slice []uint16, fn func(uint16) uint16) (ret []uint16) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapUint32 ...
func MapUint32(slice []uint32, fn func(uint32) uint32) (ret []uint32) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapUint64 ...
func MapUint64(slice []uint64, fn func(uint64) uint64) (ret []uint64) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapInt ...
func MapInt(slice []int, fn func(int) int) (ret []int) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapInt8 ...
func MapInt8(slice []int8, fn func(int8) int8) (ret []int8) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapInt16 ...
func MapInt16(slice []int16, fn func(int16) int16) (ret []int16) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapInt32 ...
func MapInt32(slice []int32, fn func(int32) int32) (ret []int32) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapInt64 ...
func MapInt64(slice []int64, fn func(int64) int64) (ret []int64) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapFloat32 ...
func MapFloat32(slice []float32, fn func(float32) float32) (ret []float32) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapFloat64 ...
func MapFloat64(slice []float64, fn func(float64) float64) (ret []float64) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapBool ...
func MapBool(slice []bool, fn func(bool) bool) (ret []bool) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}

// MapString ...
func MapString(slice []string, fn func(string) string) (ret []string) {
	for _, o := range slice {
		ret = append(ret, fn(o))
	}
	return
}
